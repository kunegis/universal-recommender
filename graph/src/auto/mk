#! /bin/sh
#
# Generate the Java wrappers around datasets in the Graph Store. 
#
# ENVIRONMENT
#	$GRAPH_DIR	Location of the Graph Store
#

exec 4>../main/java/de/dailab/recommender/graph/unirelationaldatasets/UnirelationalDatasets.java

cat >&4 <<EOF
package de.dailab.recommender.graph.unirelationaldatasets;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import de.dailab.recommender.graph.UnirelationalGraphStoreDataset;
import de.dailab.recommender.text.TextSyntaxException;

/**
 * Static methods for accessing the unirelational datasets in the Graph Store.  
 * In particular, this class contains the list of all unirelational datasets 
 * in the Graph Store. 
 */
public class UnirelationalDatasets
{
	/**
	 * Load a unirelational dataset of a given name. 
	 * 
	 * @param name Name of the dataset, e.g. "advogato"
	 * @throws IOException on IO errors
	 * @throws TextSyntaxException on syntax errors
	 * @return The loaded unirelational dataset
	 */
	public static UnirelationalGraphStoreDataset load(String name)
	       throws IOException, TextSyntaxException
	{
		return new UnirelationalGraphStoreDataset(name); 
	}

	/**
	 * @return the list of unirelational Graph Store datasets, indexed by their underlying name. 
	 */
	public static Set <String> getDatasets()
	{
		return datasets.keySet(); 
	}

	private final static Map <String, Class <? extends UnirelationalGraphStoreDataset>> datasets = 
		new HashMap <String, Class <? extends UnirelationalGraphStoreDataset>> (); 
	static 
	{
EOF

for file in $GRAPH_DIR/scp/out.* 
do
	name="`basename $file | sed -re 's,^out\\.,,'`"
	class="`echo $name | sed -re 's,_,-,;s,-,\\
,g' | sed -re 'h;s,^(.).*$,\1,;y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/;G;s,(.)..(.*),\1\2,'`"
        class="`echo $class | sed -re 's, ,,g'`"
	
	exec 3>../main/java/de/dailab/recommender/graph/unirelationaldatasets/${class}Dataset.java

	cat >&3 <<EOF
package de.dailab.recommender.graph.unirelationaldatasets;

import java.io.IOException;

import de.dailab.recommender.dataset.EntityType;
import de.dailab.recommender.dataset.MetadataName;
import de.dailab.recommender.dataset.RelationshipType;
import de.dailab.recommender.graph.UnirelationalGraphStoreDataset;
import de.dailab.recommender.text.TextSyntaxException;

/**
 * Access to the unirelational $name dataset in the Graph Store.
 * 
 * @author autogenerated
 */
@SuppressWarnings("all")
public class ${class}Dataset
      extends UnirelationalGraphStoreDataset
{
	/**
	 * Load the unirelational $name dataset from the Graph Store.
	 * 
	 * @throws IOException on IO errors
	 * @throws TextSyntaxException syntax error in the text file
	 */
	public ${class}Dataset()
	        throws IOException, TextSyntaxException
	{
		super("$name");		
	}

	/**
	 * The name of the underlying dataset.  
	 */
	public final static String NAME = "${name}"; 
EOF
	
	line3="`head -n3 $file | tail -1`"
#	echo LINE3=»$line3«

	if expr "$line3" : '^%' >/dev/null 
	then
		echo "$line3" | sed -e 's,^%,,;s, ,\
,g' | sed -e '/^$/d' | sort -u |
		while read field
		do
			type="`echo $field | sed -re 's,^([^.]+)\\..*,\1,'`"
			value="`echo $field | sed -re 's,^[^.]+\\.(.*),\1,'`"
# 			echo TYPE=»$type«
# 			echo VALUE=»$value«
			upvalue="`echo $value | tr a-z A-Z`"
			if [ $type = ent ]
			then 
			     
				cat >&3 <<EOF

	/**
	 * The $value entity type. 
	 */
	public final static EntityType $upvalue = new EntityType("$value");
EOF
			fi
			if [ $type = weight ]
			then 
				cat >&3 <<EOF

	/**
	 * The $value relationship type. 
	 */
	public final static RelationshipType $upvalue = new RelationshipType("$value");
EOF
			fi
			if [ $type = dat ]
			then 
				cat >&3 <<EOF

	/**
	 * The $value metadata name. 
	 */
	public final static MetadataName METADATA_$upvalue = new MetadataName("$value");
EOF
			fi
		done      	   
	fi

	cat >&3 <<EOF 
}	
EOF

	cat >&4 <<EOF
	    datasets.put("$name", ${class}Dataset.class); 
EOF

done

cat >&4 <<EOF
	}
}
EOF
