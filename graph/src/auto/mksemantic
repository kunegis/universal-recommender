#! /bin/sh
#
# Generate the Java wrappers around the semantic datasets
# in the Graph Store. 
#
# ENVIRONMENT
#	$GRAPH_DIR	Location of the Graph Store
#

exec 4>../main/java/de/dailab/recommender/graph/datasets/Datasets.java

cat >&4 <<EOF
package de.dailab.recommender.graph.datasets;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import de.dailab.recommender.graph.GraphStoreDataset;
import de.dailab.recommender.text.TextSyntaxException;

/**
 * Static methods for accessing the semantic datasets in the Graph Store.  
 * In particular, this class contains the list of all semantic datasets 
 * in the Graph Store. 
 * 
 * @author autogenerated
 */
public class Datasets
{
	/**
	 * Load a semantic dataset of a given name. 
	 * 
	 * @param name Name of the dataset, e.g. "movielens-sem"
	 * @throws IOException on IO errors
	 * @throws TextSyntaxException on syntax errors
	 * @return The loaded dataset
	 */
	public static GraphStoreDataset load(String name)
	       throws IOException, TextSyntaxException
	{
		return new GraphStoreDataset(name); 
	}

	/**
	 * @return the list of semantic Graph Store datasets by their name. 
	 */
	public static Set <String> getDatasets()
	{
		return datasets.keySet(); 
	}

	private final static Map <String, Class <? extends GraphStoreDataset>> datasets = 
		new HashMap <String, Class <? extends GraphStoreDataset>> (); 
	static 
	{
EOF

for dir in $GRAPH_DIR/semantic/*
do
	name="`basename $dir`"
		class="`echo $name | sed -re 's,-,\\
,g' | sed -re 'h;s,^(.).*$,\1,;y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/;G;s,(.)..(.*),\1\2,'`"
        class="`echo $class | sed -re 's, ,,g'`"

	exec 3>../main/java/de/dailab/recommender/graph/datasets/${class}Dataset.java

	cat >&3 <<EOF
package de.dailab.recommender.graph.datasets;

import java.io.IOException;

import de.dailab.recommender.dataset.EntityType;
import de.dailab.recommender.dataset.MetadataName;
import de.dailab.recommender.dataset.RelationshipType;
import de.dailab.recommender.graph.GraphStoreDataset;
import de.dailab.recommender.text.TextSyntaxException;

/**
 * Access to the semantic $name dataset in the Graph Store.
 * 
 * @author autogenerated
 */
@SuppressWarnings("all")
public class ${class}Dataset
      extends GraphStoreDataset
{
	/**
	 * Load the semantic $name dataset from the Graph Store.
	 * 
	 * @throws IOException on IO errors
	 * @throws TextSyntaxException syntax error in the text file
	 */
	public ${class}Dataset()
	        throws IOException, TextSyntaxException
	{
		super("$name");		
	}
EOF

	all_line3=""

	for file in $dir/*[!~]
	do
		line3="`head -n3 $file | tail -1`"
		if expr "$line3" : '^%' >/dev/null 
		then
		    all_line3="$all_line3 `echo $line3 | sed -re 's,^%,,'`"
		fi

		basefilename="`basename $file`"
		if expr $basefilename : rel. >/dev/null
		then
#			echo BASEFILENAME=»$basefilename«
			all_line3="$all_line3 `echo "$basefilename" | sed -re 's,^rel.,weight.,'`"
#			echo ALL_LINE3=»$all_line3«
		fi

	done

	echo ALL_LINE3=»$all_line3«

#	echo "$all_line3" | sed -e 's, ,\
#,g' | sed -e '/^$/d' | sort -u 

	echo "$all_line3" | sed -e 's, ,\
,g' | sed -e '/^$/d' | sort -u |

			while read -r field
			do
				echo FIELD="»$field«"
			    	echo $field | fgrep -vq . && continue;  # "ent" on a single line
				type="`echo $field | sed -re 's,^([^.]+)\\..*,\1,'`"
				value="`echo "$field" | sed -re 's,^\S+\\.([^.]+),\1,'`"
	 			echo TYPE=»$type«
	 			echo VALUE=»$value«

				value_esc="`echo $value | sed -re 's,\\\\s,/,g;s,\\\\d,.,g;s,\\\\\\\\,\\\\,g'`"

				upvalue="`echo $value_esc | tr a-z A-Z | sed -re 's,[^A-Z_],_,g;s,_+,_,g'`"
				echo UPVALUE=»$upvalue«

				if [ $type = ent ]
				then 

					cat >&3 <<EOF

	/**
	 * The $value entity type. 
	 */
	public final static EntityType $upvalue = new EntityType("$value");
EOF
				fi

				if [ $type = weight ]
				then 
					cat >&3 <<EOF

	/**
	 * The $value_esc relationship type. 
	 */
	public final static RelationshipType $upvalue = new RelationshipType("$value_esc");
EOF
				fi
				if [ $type = dat ]
				then 
					cat >&3 <<EOF

	/**
	 * The $value metadata name. 
	 */
	public final static MetadataName METADATA_$upvalue = new MetadataName("$value");
EOF
				fi
			done      	   

	cat >&3 <<EOF 
}	
EOF

	cat >&4 <<EOF
	    datasets.put("$name", ${class}Dataset.class); 
EOF

done

cat >&4 <<EOF
	}
}
EOF
