package de.dailab.recommender.graph.datasets;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import de.dailab.recommender.graph.GraphStoreDataset;
import de.dailab.recommender.text.TextSyntaxException;

/**
 * Static methods for accessing the semantic datasets in the Graph Store. In particular, this class contains the list of
 * all semantic datasets in the Graph Store.
 * 
 * @author autogenerated
 */
public class Datasets
{
	/**
	 * Load a semantic dataset of a given name.
	 * 
	 * @param name Name of the dataset, e.g. "movielens-10m"
	 * @throws IOException on IO errors
	 * @throws TextSyntaxException on syntax errors
	 * @return The loaded dataset
	 */
	public static GraphStoreDataset load(String name)
	    throws IOException, TextSyntaxException
	{
		return new GraphStoreDataset(name);
	}

	/**
	 * Get all semantic Graph Store datasets.
	 * 
	 * @return the list of semantic Graph Store datasets by their name.
	 */
	public static Set <String> getDatasets()
	{
		return datasets.keySet();
	}

	private final static Map <String, Class <? extends GraphStoreDataset>> datasets = new HashMap <String, Class <? extends GraphStoreDataset>>();
	static
	{
		datasets.put("btc", BtcDataset.class);
		datasets.put("gama", GamaDataset.class);
		datasets.put("movielens-100k", Movielens100kDataset.class);
		datasets.put("movielens-10m", Movielens10mDataset.class);
		datasets.put("music", MusicDataset.class);
		datasets.put("small-hybrid", SmallHybridDataset.class);
		datasets.put("tel1310", Tel1310Dataset.class);
	}
}
